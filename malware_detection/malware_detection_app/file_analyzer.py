import os, magic, hashlib, pefile, json
from oletools.olevba import VBA_Parser

def get_files(path):
    if os.path.isdir(path):
        files = []
        for item in os.listdir(path):
            pth = os.path.join(path,item)
            if os.path.isfile(pth):
                files.append(pth)
        return files
    if os.path.isfile(path):
        return [path]

def get_md5(path):
    md5 = hashlib.md5()
    with open(path, 'rb') as f:
        chunk = f.read(4096)
        while len(chunk) > 0:
            md5.update(chunk)
            chunk = f.read(4096)
        return md5.hexdigest()

def get_file_hashes(path):
    md5 = hashlib.md5()
    sha1 = hashlib.sha1()
    sha256 = hashlib.sha256()
    with open(path,'rb') as f:
        chunk = f.read(4096)
        while len(chunk) > 0:
            md5.update(chunk)
            sha1.update(chunk)
            sha256.update(chunk)
            chunk = f.read(4096)
        return {'md5':md5.hexdigest(), 'sha1':sha1.hexdigest(), 'sha256':sha256.hexdigest()}

def get_imphash(path):
    try:
        pe = pefile.PE(path)
        return pe.get_imphash()
    except:
        return "[!] Err : Invalid PE header"


def analyze_doc(path):
    try:
        vb_parse = VBA_Parser(path)
        vb_parse.analyze_macros()
        return json.dumps(vb_parse.analysis_results, indent=2, default=str)
    except:
        return 'Not a VBA file'
    
def get_imports(path):
    try:
        pe = pefile.PE(path)
        pe.parse_data_directories()
        total_functions = 0
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            total_functions += len(entry.imports)
        return (len(pe.DIRECTORY_ENTRY_IMPORT), total_functions)
    except:
        return "[!] Err: Invalid PE"

def get_flags(section):
    flags = ""
    if section.Characteristics & 0x40000000:
        flags += "R"
    if section.Characteristics & 0x80000000:
        flags += "W"
    if section.Characteristics & 0x20000000:
        flags += "X"
    return flags

def analyze_sections(path):
    sections = []
    try:
        pe = pefile.PE(path)
        for section in pe.sections:
            section_name = section.Name.decode().rstrip("\x00")
            sections.append(get_flags(section))
        return sections
    except:
        return "[!] Err: Invalid PE"


def analyze_metrics(path):
    files = get_files(path)
    response = {}
    for file in files:
        print(file)
        hashes = get_file_hashes(file)
        response['file_summary'] = {
            'type': magic.from_file(file),
            'md5': hashes['md5'],
            'sha1': hashes['sha1'],
            'sha256': hashes['sha256'],
            'imphash': get_imphash(file)
        }
    if os.path.isfile(path):
        response['vba'] = analyze_doc(path)
    for file in files:
        response['imports'] = get_imports(file)
    for file in files:
        response['PE'] = analyze_sections(file)
    
    return response
    
# response = analyze_metrics(path='./model/malwares/Locky.exe')
# print(response)